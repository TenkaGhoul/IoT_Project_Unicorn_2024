"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoTHubTokenCredentials = void 0;
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 */
const ms_rest_js_1 = require("@azure/ms-rest-js");
const connection_string_1 = require("../common-core/connection_string");
const shared_access_signature_1 = require("../common-core/shared_access_signature");
const authorization_1 = require("../common-core/authorization");
/**
 * Creates shared access signatures based on the connection string passed to the constructor.
 * This class is used by the protocol layer of the SDK to add authentication headers to each request.
 */
class IoTHubTokenCredentials {
    constructor(connectionString) {
        this._connectionString = connection_string_1.ConnectionString.parse(connectionString, ['HostName', 'SharedAccessKeyName', 'SharedAccessKey']);
    }
    /**
     * Adds an authorization header to the request object.
     *
     * @param webResource The request object that needs its authorization header populated
     */
    signRequest(webResource) {
        const sas = shared_access_signature_1.SharedAccessSignature.create(this._connectionString.HostName, this._connectionString.SharedAccessKeyName, this._connectionString.SharedAccessKey, (0, authorization_1.anHourFromNow)()).toString();
        webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, sas);
        return Promise.resolve(webResource);
    }
    /**
     * Gets the Azure IoT Hub instance name from the connection string
     */
    getHubName() {
        return this._connectionString.HostName;
    }
}
exports.IoTHubTokenCredentials = IoTHubTokenCredentials;
//# sourceMappingURL=iothub_token_credentials.js.map