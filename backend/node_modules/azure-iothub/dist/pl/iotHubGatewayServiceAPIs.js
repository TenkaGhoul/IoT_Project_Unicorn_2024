"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotHubGatewayServiceAPIsMappers = exports.IotHubGatewayServiceAPIsModels = exports.IotHubGatewayServiceAPIsContext = exports.IotHubGatewayServiceAPIs = void 0;
const Models = require("./models");
exports.IotHubGatewayServiceAPIsModels = Models;
const Mappers = require("./models/mappers");
exports.IotHubGatewayServiceAPIsMappers = Mappers;
const operations = require("./operations");
const iotHubGatewayServiceAPIsContext_1 = require("./iotHubGatewayServiceAPIsContext");
Object.defineProperty(exports, "IotHubGatewayServiceAPIsContext", { enumerable: true, get: function () { return iotHubGatewayServiceAPIsContext_1.IotHubGatewayServiceAPIsContext; } });
class IotHubGatewayServiceAPIs extends iotHubGatewayServiceAPIsContext_1.IotHubGatewayServiceAPIsContext {
    /**
     * Initializes a new instance of the IotHubGatewayServiceAPIs class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials, options) {
        super(credentials, options);
        this.configuration = new operations.ConfigurationOperations(this);
        this.statistics = new operations.Statistics(this);
        this.devices = new operations.Devices(this);
        this.bulkRegistry = new operations.BulkRegistry(this);
        this.query = new operations.Query(this);
        this.jobs = new operations.Jobs(this);
        this.cloudToDeviceMessages = new operations.CloudToDeviceMessages(this);
        this.modules = new operations.Modules(this);
        this.digitalTwin = new operations.DigitalTwin(this);
    }
}
exports.IotHubGatewayServiceAPIs = IotHubGatewayServiceAPIs;
__exportStar(require("./operations"), exports);
//# sourceMappingURL=iotHubGatewayServiceAPIs.js.map